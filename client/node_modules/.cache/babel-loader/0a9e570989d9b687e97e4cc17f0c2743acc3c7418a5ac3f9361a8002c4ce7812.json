{"ast":null,"code":"var _jsxFileName = \"D:\\\\FRONT-END (LIT)\\\\NULLCLASS_COURSE\\\\app2\\\\client\\\\src\\\\Context.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nconst socket = io('http://localhost:2000');\nconst ContextProvider = ({\n  children\n}) => {\n  _s();\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [stream, setStream] = useState();\n  const [stream1, setStream1] = useState();\n  const [name, setName] = useState('');\n  const [call, setCall] = useState({});\n  const [me, setMe] = useState('');\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n  const shareRef = useRef();\n  const sig = useRef();\n  const shareFrom = useRef();\n  const [screen, setScreen] = useState();\n  const [screen1, setScreen1] = useState();\n  const [nonhostId, setNonhostId] = useState();\n  const [share, setShare] = useState({});\n  const [screenAccepted, setScreenAccepted] = useState(false);\n  const [screenEnded, setScreenEnded] = useState(false);\n  const myScreenVideo = useRef();\n  const userScreenVideo = useRef();\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n    }).catch(er => alert(er));\n    socket.emit('room:join');\n    socket.on('callUser', ({\n      from,\n      name: callerName,\n      signal\n    }) => {\n      setCall({\n        isReceivingCall: true,\n        from,\n        name: callerName,\n        signal\n      });\n    });\n    return () => {\n      socket.off('callUser');\n    };\n  }, []);\n  useEffect(() => {\n    socket.on('shareUser', async ({\n      from,\n      name: callerName,\n      signal\n    }) => {\n      sig.current = await signal;\n      shareFrom.current = await from;\n      setShare({\n        isReceivingScreen: true,\n        from,\n        name: callerName,\n        signal: sig\n      });\n      answerScreen();\n    });\n    return () => {\n      socket.off('shareUser');\n    };\n  }, []);\n  useEffect(() => {\n    socket.on('room:join', data => {\n      setMe(data);\n    });\n    return () => {\n      socket.off('room:join');\n    };\n  }, [socket]);\n  useEffect(() => {\n    if (myVideo.current && stream) {\n      myVideo.current.srcObject = stream;\n    }\n  }, [stream]);\n  useEffect(() => {\n    if (userVideo.current && stream1) {\n      userVideo.current.srcObject = stream1;\n    }\n  }, [stream1]);\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('answerCall', {\n        signal: data,\n        to: call.from\n      });\n    });\n    peer.on('stream', currentStream => {\n      setStream1(currentStream);\n    });\n    peer.signal(call.signal);\n    connectionRef.current = peer;\n  };\n  const callUser = id => {\n    setNonhostId(id);\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('callUser', {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name\n      });\n    });\n    peer.on('stream', currentStream => {\n      setStream1(currentStream);\n    });\n    socket.on('callAccepted', signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n    connectionRef.current = peer;\n  };\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n    window.location.reload();\n  };\n  const shareScreen = (currstream, id) => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream: screen\n    });\n    currstream.getTracks().forEach(track => {\n      peer.addTrack(track, currstream);\n    });\n    peer.on('signal', data => {\n      socket.emit('shareUser', {\n        userToShare: id,\n        signalData: data,\n        from: me,\n        name\n      });\n    });\n    peer.on('track', (track, stream) => {\n      if (track.kind === 'video') {\n        setScreen1(stream);\n      }\n    });\n    socket.on('screenAccepted', signal => {\n      setScreenAccepted(true);\n      peer.signal(signal);\n    });\n    shareRef.current = peer;\n  };\n  const answerScreen = () => {\n    setScreenAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('answerScreen', {\n        signal: data,\n        to: shareFrom.current\n      });\n    });\n    peer.on('track', (track, stream) => {\n      console.log(track);\n      if (track.kind === 'video') {\n        setScreen1(stream);\n      }\n    });\n    peer.signal(sig.current);\n    shareRef.current = peer;\n  };\n  const startScreenShare = () => {\n    navigator.mediaDevices.getDisplayMedia({\n      video: {\n        mediaSource: 'screen'\n      },\n      audio: true\n    }).then(currstream => {\n      setScreen(currstream);\n      let vidTrack = currstream.getVideoTracks()[0];\n      if (connectionRef.current) {\n        console.log(nonhostId);\n        shareScreen(currstream, nonhostId);\n      }\n      vidTrack.onended = () => {\n        stopScreenSharing();\n      };\n    }).catch(error => console.error('Error sharing screen:', error));\n  };\n  const stopScreenSharing = () => {\n    setScreenAccepted(false);\n    setScreenEnded(true);\n    shareRef.current.destroy();\n    setScreen(null);\n  };\n  useEffect(() => {\n    if (myScreenVideo.current && screen) {\n      myScreenVideo.current.srcObject = screen;\n    }\n  }, [screen]);\n  useEffect(() => {\n    if (userScreenVideo.current && screen1) {\n      userScreenVideo.current.srcObject = screen1;\n    }\n  }, [screen1]);\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      call,\n      callAccepted,\n      myVideo,\n      userVideo,\n      stream,\n      setStream,\n      setStream1,\n      name,\n      setName,\n      callEnded,\n      me,\n      callUser,\n      leaveCall,\n      answerCall,\n      share,\n      screen,\n      myScreenVideo,\n      userScreenVideo,\n      startScreenShare,\n      stopScreenSharing,\n      screenAccepted,\n      screenEnded,\n      answerScreen\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 9\n  }, this);\n};\n_s(ContextProvider, \"B6PtsBDdp58a1+dtq1bnBdLWAZs=\");\n_c = ContextProvider;\nexport { ContextProvider, SocketContext };\nvar _c;\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["React","createContext","useState","useRef","useEffect","io","Peer","jsxDEV","_jsxDEV","SocketContext","socket","ContextProvider","children","_s","callAccepted","setCallAccepted","callEnded","setCallEnded","stream","setStream","stream1","setStream1","name","setName","call","setCall","me","setMe","myVideo","userVideo","connectionRef","shareRef","sig","shareFrom","screen","setScreen","screen1","setScreen1","nonhostId","setNonhostId","share","setShare","screenAccepted","setScreenAccepted","screenEnded","setScreenEnded","myScreenVideo","userScreenVideo","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","catch","er","alert","emit","on","from","callerName","signal","isReceivingCall","off","current","isReceivingScreen","answerScreen","data","srcObject","answerCall","peer","initiator","trickle","to","callUser","id","userToCall","signalData","leaveCall","destroy","window","location","reload","shareScreen","currstream","getTracks","forEach","track","addTrack","userToShare","kind","console","log","startScreenShare","getDisplayMedia","mediaSource","vidTrack","getVideoTracks","onended","stopScreenSharing","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/FRONT-END (LIT)/NULLCLASS_COURSE/app2/client/src/Context.js"],"sourcesContent":["import React, { createContext, useState, useRef, useEffect } from 'react'\r\nimport { io } from 'socket.io-client'\r\nimport Peer from 'simple-peer'\r\n\r\nconst SocketContext = createContext()\r\n\r\nconst socket = io('http://localhost:2000')\r\n\r\nconst ContextProvider = ({ children }) => {\r\n    const [callAccepted, setCallAccepted] = useState(false)\r\n    const [callEnded, setCallEnded] = useState(false)\r\n    const [stream, setStream] = useState()\r\n    const [stream1, setStream1] = useState()\r\n    const [name, setName] = useState('')\r\n    const [call, setCall] = useState({})\r\n    const [me, setMe] = useState('')\r\n\r\n    const myVideo = useRef()\r\n    const userVideo = useRef()\r\n    const connectionRef = useRef()\r\n    const shareRef = useRef()\r\n\r\n    const sig = useRef()\r\n    const shareFrom = useRef()\r\n\r\n    const [screen, setScreen] = useState()\r\n    const [screen1, setScreen1] = useState()\r\n    const [nonhostId, setNonhostId] = useState()\r\n    const [share, setShare] = useState({})\r\n    const [screenAccepted, setScreenAccepted] = useState(false)\r\n    const [screenEnded, setScreenEnded] = useState(false)\r\n    const myScreenVideo = useRef()\r\n    const userScreenVideo = useRef()\r\n\r\n    useEffect(() => {\r\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n            .then((currentStream) => {\r\n                setStream(currentStream)\r\n            })\r\n            .catch((er) => alert(er))\r\n        socket.emit('room:join')\r\n\r\n        socket.on('callUser', ({ from, name: callerName, signal }) => {\r\n            setCall({ isReceivingCall: true, from, name: callerName, signal })\r\n        })\r\n\r\n        return () => {\r\n            socket.off('callUser')\r\n        }\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        socket.on('shareUser', async ({ from, name: callerName, signal }) => {\r\n            sig.current = await signal\r\n            shareFrom.current = await from\r\n            setShare({ isReceivingScreen: true, from, name: callerName, signal: sig })\r\n            answerScreen()\r\n        })\r\n        return () => {\r\n            socket.off('shareUser')\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        socket.on('room:join', (data) => {\r\n            setMe(data)\r\n        })\r\n        return () => {\r\n            socket.off('room:join')\r\n        }\r\n    }, [socket])\r\n\r\n    useEffect(() => {\r\n        if (myVideo.current && stream) {\r\n            myVideo.current.srcObject = stream\r\n        }\r\n    }, [stream])\r\n    useEffect(() => {\r\n        if (userVideo.current && stream1) {\r\n            userVideo.current.srcObject = stream1\r\n        }\r\n    }, [stream1])\r\n\r\n\r\n    const answerCall = () => {\r\n        setCallAccepted(true)\r\n        const peer = new Peer({ initiator: false, trickle: false, stream })\r\n        peer.on('signal', (data) => {\r\n            socket.emit('answerCall', { signal: data, to: call.from })\r\n        })\r\n        peer.on('stream', (currentStream) => {\r\n            setStream1(currentStream)\r\n        })\r\n        peer.signal(call.signal)\r\n        connectionRef.current = peer\r\n    }\r\n\r\n    const callUser = (id) => {\r\n        setNonhostId(id)\r\n        const peer = new Peer({ initiator: true, trickle: false, stream })\r\n        peer.on('signal', (data) => {\r\n            socket.emit('callUser', { userToCall: id, signalData: data, from: me, name })\r\n        })\r\n        peer.on('stream', (currentStream) => {\r\n            setStream1(currentStream)\r\n        })\r\n        socket.on('callAccepted', (signal) => {\r\n            setCallAccepted(true)\r\n            peer.signal(signal)\r\n        })\r\n        connectionRef.current = peer\r\n    }\r\n\r\n    const leaveCall = () => {\r\n        setCallEnded(true)\r\n        connectionRef.current.destroy()\r\n        window.location.reload()\r\n    }\r\n\r\n    const shareScreen = (currstream, id) => {\r\n        const peer = new Peer({ initiator: true, trickle: false, stream: screen })\r\n        currstream.getTracks().forEach(track => {\r\n            peer.addTrack(track, currstream)\r\n        })\r\n        peer.on('signal', (data) => {\r\n            socket.emit('shareUser', { userToShare: id, signalData: data, from: me, name })\r\n        })\r\n        peer.on('track', (track, stream) => {\r\n            if (track.kind === 'video') {\r\n                setScreen1(stream)\r\n            }\r\n        })\r\n        socket.on('screenAccepted', (signal) => {\r\n            setScreenAccepted(true)\r\n            peer.signal(signal)\r\n        })\r\n        shareRef.current = peer\r\n    }\r\n\r\n    const answerScreen = () => {\r\n        setScreenAccepted(true)\r\n        const peer = new Peer({ initiator: false, trickle: false, stream })\r\n        peer.on('signal', (data) => {\r\n            socket.emit('answerScreen', { signal: data, to: shareFrom.current })\r\n        })\r\n        peer.on('track', (track, stream) => {\r\n            console.log(track)\r\n            if (track.kind === 'video') {\r\n                setScreen1(stream)\r\n            }\r\n        })\r\n        peer.signal(sig.current)\r\n        shareRef.current = peer\r\n    }\r\n\r\n\r\n    const startScreenShare = () => {\r\n        navigator.mediaDevices.getDisplayMedia({ video: { mediaSource: 'screen', }, audio: true })\r\n            .then((currstream) => {\r\n                setScreen(currstream)\r\n                let vidTrack = currstream.getVideoTracks()[0]\r\n                if (connectionRef.current) {\r\n                    console.log(nonhostId)\r\n                    shareScreen(currstream, nonhostId)\r\n                }\r\n                vidTrack.onended = () => {\r\n                    stopScreenSharing()\r\n                }\r\n            })\r\n            .catch((error) => console.error('Error sharing screen:', error))\r\n    }\r\n    const stopScreenSharing = () => {\r\n        setScreenAccepted(false)\r\n        setScreenEnded(true)\r\n        shareRef.current.destroy()\r\n        setScreen(null)\r\n    }\r\n    useEffect(() => {\r\n        if (myScreenVideo.current && screen) {\r\n            myScreenVideo.current.srcObject = screen\r\n        }\r\n    }, [screen])\r\n    useEffect(() => {\r\n        if (userScreenVideo.current && screen1) {\r\n            userScreenVideo.current.srcObject = screen1\r\n        }\r\n    }, [screen1])\r\n\r\n\r\n\r\n    return (\r\n        <SocketContext.Provider value={{ call, callAccepted, myVideo, userVideo, stream, setStream, setStream1, name, setName, callEnded, me, callUser, leaveCall, answerCall, share, screen, myScreenVideo, userScreenVideo, startScreenShare, stopScreenSharing, screenAccepted, screenEnded, answerScreen }} >\r\n            {children}\r\n        </SocketContext.Provider>\r\n    )\r\n}\r\n\r\nexport { ContextProvider, SocketContext }"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACzE,SAASC,EAAE,QAAQ,kBAAkB;AACrC,OAAOC,IAAI,MAAM,aAAa;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,aAAa,gBAAGR,aAAa,CAAC,CAAC;AAErC,MAAMS,MAAM,GAAGL,EAAE,CAAC,uBAAuB,CAAC;AAE1C,MAAMM,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACtC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACc,SAAS,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACgB,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAAC,CAAC;EACtC,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,CAAC;EACxC,MAAM,CAACoB,IAAI,EAAEC,OAAO,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACsB,IAAI,EAAEC,OAAO,CAAC,GAAGvB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpC,MAAM,CAACwB,EAAE,EAAEC,KAAK,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAEhC,MAAM0B,OAAO,GAAGzB,MAAM,CAAC,CAAC;EACxB,MAAM0B,SAAS,GAAG1B,MAAM,CAAC,CAAC;EAC1B,MAAM2B,aAAa,GAAG3B,MAAM,CAAC,CAAC;EAC9B,MAAM4B,QAAQ,GAAG5B,MAAM,CAAC,CAAC;EAEzB,MAAM6B,GAAG,GAAG7B,MAAM,CAAC,CAAC;EACpB,MAAM8B,SAAS,GAAG9B,MAAM,CAAC,CAAC;EAE1B,MAAM,CAAC+B,MAAM,EAAEC,SAAS,CAAC,GAAGjC,QAAQ,CAAC,CAAC;EACtC,MAAM,CAACkC,OAAO,EAAEC,UAAU,CAAC,GAAGnC,QAAQ,CAAC,CAAC;EACxC,MAAM,CAACoC,SAAS,EAAEC,YAAY,CAAC,GAAGrC,QAAQ,CAAC,CAAC;EAC5C,MAAM,CAACsC,KAAK,EAAEC,QAAQ,CAAC,GAAGvC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtC,MAAM,CAACwC,cAAc,EAAEC,iBAAiB,CAAC,GAAGzC,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAAC0C,WAAW,EAAEC,cAAc,CAAC,GAAG3C,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM4C,aAAa,GAAG3C,MAAM,CAAC,CAAC;EAC9B,MAAM4C,eAAe,GAAG5C,MAAM,CAAC,CAAC;EAEhCC,SAAS,CAAC,MAAM;IACZ4C,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MAAEC,KAAK,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC,CAC5DC,IAAI,CAAEC,aAAa,IAAK;MACrBnC,SAAS,CAACmC,aAAa,CAAC;IAC5B,CAAC,CAAC,CACDC,KAAK,CAAEC,EAAE,IAAKC,KAAK,CAACD,EAAE,CAAC,CAAC;IAC7B9C,MAAM,CAACgD,IAAI,CAAC,WAAW,CAAC;IAExBhD,MAAM,CAACiD,EAAE,CAAC,UAAU,EAAE,CAAC;MAAEC,IAAI;MAAEtC,IAAI,EAAEuC,UAAU;MAAEC;IAAO,CAAC,KAAK;MAC1DrC,OAAO,CAAC;QAAEsC,eAAe,EAAE,IAAI;QAAEH,IAAI;QAAEtC,IAAI,EAAEuC,UAAU;QAAEC;MAAO,CAAC,CAAC;IACtE,CAAC,CAAC;IAEF,OAAO,MAAM;MACTpD,MAAM,CAACsD,GAAG,CAAC,UAAU,CAAC;IAC1B,CAAC;EAEL,CAAC,EAAE,EAAE,CAAC;EAEN5D,SAAS,CAAC,MAAM;IACZM,MAAM,CAACiD,EAAE,CAAC,WAAW,EAAE,OAAO;MAAEC,IAAI;MAAEtC,IAAI,EAAEuC,UAAU;MAAEC;IAAO,CAAC,KAAK;MACjE9B,GAAG,CAACiC,OAAO,GAAG,MAAMH,MAAM;MAC1B7B,SAAS,CAACgC,OAAO,GAAG,MAAML,IAAI;MAC9BnB,QAAQ,CAAC;QAAEyB,iBAAiB,EAAE,IAAI;QAAEN,IAAI;QAAEtC,IAAI,EAAEuC,UAAU;QAAEC,MAAM,EAAE9B;MAAI,CAAC,CAAC;MAC1EmC,YAAY,CAAC,CAAC;IAClB,CAAC,CAAC;IACF,OAAO,MAAM;MACTzD,MAAM,CAACsD,GAAG,CAAC,WAAW,CAAC;IAC3B,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN5D,SAAS,CAAC,MAAM;IACZM,MAAM,CAACiD,EAAE,CAAC,WAAW,EAAGS,IAAI,IAAK;MAC7BzC,KAAK,CAACyC,IAAI,CAAC;IACf,CAAC,CAAC;IACF,OAAO,MAAM;MACT1D,MAAM,CAACsD,GAAG,CAAC,WAAW,CAAC;IAC3B,CAAC;EACL,CAAC,EAAE,CAACtD,MAAM,CAAC,CAAC;EAEZN,SAAS,CAAC,MAAM;IACZ,IAAIwB,OAAO,CAACqC,OAAO,IAAI/C,MAAM,EAAE;MAC3BU,OAAO,CAACqC,OAAO,CAACI,SAAS,GAAGnD,MAAM;IACtC;EACJ,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EACZd,SAAS,CAAC,MAAM;IACZ,IAAIyB,SAAS,CAACoC,OAAO,IAAI7C,OAAO,EAAE;MAC9BS,SAAS,CAACoC,OAAO,CAACI,SAAS,GAAGjD,OAAO;IACzC;EACJ,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EAGb,MAAMkD,UAAU,GAAGA,CAAA,KAAM;IACrBvD,eAAe,CAAC,IAAI,CAAC;IACrB,MAAMwD,IAAI,GAAG,IAAIjE,IAAI,CAAC;MAAEkE,SAAS,EAAE,KAAK;MAAEC,OAAO,EAAE,KAAK;MAAEvD;IAAO,CAAC,CAAC;IACnEqD,IAAI,CAACZ,EAAE,CAAC,QAAQ,EAAGS,IAAI,IAAK;MACxB1D,MAAM,CAACgD,IAAI,CAAC,YAAY,EAAE;QAAEI,MAAM,EAAEM,IAAI;QAAEM,EAAE,EAAElD,IAAI,CAACoC;MAAK,CAAC,CAAC;IAC9D,CAAC,CAAC;IACFW,IAAI,CAACZ,EAAE,CAAC,QAAQ,EAAGL,aAAa,IAAK;MACjCjC,UAAU,CAACiC,aAAa,CAAC;IAC7B,CAAC,CAAC;IACFiB,IAAI,CAACT,MAAM,CAACtC,IAAI,CAACsC,MAAM,CAAC;IACxBhC,aAAa,CAACmC,OAAO,GAAGM,IAAI;EAChC,CAAC;EAED,MAAMI,QAAQ,GAAIC,EAAE,IAAK;IACrBrC,YAAY,CAACqC,EAAE,CAAC;IAChB,MAAML,IAAI,GAAG,IAAIjE,IAAI,CAAC;MAAEkE,SAAS,EAAE,IAAI;MAAEC,OAAO,EAAE,KAAK;MAAEvD;IAAO,CAAC,CAAC;IAClEqD,IAAI,CAACZ,EAAE,CAAC,QAAQ,EAAGS,IAAI,IAAK;MACxB1D,MAAM,CAACgD,IAAI,CAAC,UAAU,EAAE;QAAEmB,UAAU,EAAED,EAAE;QAAEE,UAAU,EAAEV,IAAI;QAAER,IAAI,EAAElC,EAAE;QAAEJ;MAAK,CAAC,CAAC;IACjF,CAAC,CAAC;IACFiD,IAAI,CAACZ,EAAE,CAAC,QAAQ,EAAGL,aAAa,IAAK;MACjCjC,UAAU,CAACiC,aAAa,CAAC;IAC7B,CAAC,CAAC;IACF5C,MAAM,CAACiD,EAAE,CAAC,cAAc,EAAGG,MAAM,IAAK;MAClC/C,eAAe,CAAC,IAAI,CAAC;MACrBwD,IAAI,CAACT,MAAM,CAACA,MAAM,CAAC;IACvB,CAAC,CAAC;IACFhC,aAAa,CAACmC,OAAO,GAAGM,IAAI;EAChC,CAAC;EAED,MAAMQ,SAAS,GAAGA,CAAA,KAAM;IACpB9D,YAAY,CAAC,IAAI,CAAC;IAClBa,aAAa,CAACmC,OAAO,CAACe,OAAO,CAAC,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;EAC5B,CAAC;EAED,MAAMC,WAAW,GAAGA,CAACC,UAAU,EAAET,EAAE,KAAK;IACpC,MAAML,IAAI,GAAG,IAAIjE,IAAI,CAAC;MAAEkE,SAAS,EAAE,IAAI;MAAEC,OAAO,EAAE,KAAK;MAAEvD,MAAM,EAAEgB;IAAO,CAAC,CAAC;IAC1EmD,UAAU,CAACC,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAI;MACpCjB,IAAI,CAACkB,QAAQ,CAACD,KAAK,EAAEH,UAAU,CAAC;IACpC,CAAC,CAAC;IACFd,IAAI,CAACZ,EAAE,CAAC,QAAQ,EAAGS,IAAI,IAAK;MACxB1D,MAAM,CAACgD,IAAI,CAAC,WAAW,EAAE;QAAEgC,WAAW,EAAEd,EAAE;QAAEE,UAAU,EAAEV,IAAI;QAAER,IAAI,EAAElC,EAAE;QAAEJ;MAAK,CAAC,CAAC;IACnF,CAAC,CAAC;IACFiD,IAAI,CAACZ,EAAE,CAAC,OAAO,EAAE,CAAC6B,KAAK,EAAEtE,MAAM,KAAK;MAChC,IAAIsE,KAAK,CAACG,IAAI,KAAK,OAAO,EAAE;QACxBtD,UAAU,CAACnB,MAAM,CAAC;MACtB;IACJ,CAAC,CAAC;IACFR,MAAM,CAACiD,EAAE,CAAC,gBAAgB,EAAGG,MAAM,IAAK;MACpCnB,iBAAiB,CAAC,IAAI,CAAC;MACvB4B,IAAI,CAACT,MAAM,CAACA,MAAM,CAAC;IACvB,CAAC,CAAC;IACF/B,QAAQ,CAACkC,OAAO,GAAGM,IAAI;EAC3B,CAAC;EAED,MAAMJ,YAAY,GAAGA,CAAA,KAAM;IACvBxB,iBAAiB,CAAC,IAAI,CAAC;IACvB,MAAM4B,IAAI,GAAG,IAAIjE,IAAI,CAAC;MAAEkE,SAAS,EAAE,KAAK;MAAEC,OAAO,EAAE,KAAK;MAAEvD;IAAO,CAAC,CAAC;IACnEqD,IAAI,CAACZ,EAAE,CAAC,QAAQ,EAAGS,IAAI,IAAK;MACxB1D,MAAM,CAACgD,IAAI,CAAC,cAAc,EAAE;QAAEI,MAAM,EAAEM,IAAI;QAAEM,EAAE,EAAEzC,SAAS,CAACgC;MAAQ,CAAC,CAAC;IACxE,CAAC,CAAC;IACFM,IAAI,CAACZ,EAAE,CAAC,OAAO,EAAE,CAAC6B,KAAK,EAAEtE,MAAM,KAAK;MAChC0E,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC;MAClB,IAAIA,KAAK,CAACG,IAAI,KAAK,OAAO,EAAE;QACxBtD,UAAU,CAACnB,MAAM,CAAC;MACtB;IACJ,CAAC,CAAC;IACFqD,IAAI,CAACT,MAAM,CAAC9B,GAAG,CAACiC,OAAO,CAAC;IACxBlC,QAAQ,CAACkC,OAAO,GAAGM,IAAI;EAC3B,CAAC;EAGD,MAAMuB,gBAAgB,GAAGA,CAAA,KAAM;IAC3B9C,SAAS,CAACC,YAAY,CAAC8C,eAAe,CAAC;MAAE5C,KAAK,EAAE;QAAE6C,WAAW,EAAE;MAAU,CAAC;MAAE5C,KAAK,EAAE;IAAK,CAAC,CAAC,CACrFC,IAAI,CAAEgC,UAAU,IAAK;MAClBlD,SAAS,CAACkD,UAAU,CAAC;MACrB,IAAIY,QAAQ,GAAGZ,UAAU,CAACa,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;MAC7C,IAAIpE,aAAa,CAACmC,OAAO,EAAE;QACvB2B,OAAO,CAACC,GAAG,CAACvD,SAAS,CAAC;QACtB8C,WAAW,CAACC,UAAU,EAAE/C,SAAS,CAAC;MACtC;MACA2D,QAAQ,CAACE,OAAO,GAAG,MAAM;QACrBC,iBAAiB,CAAC,CAAC;MACvB,CAAC;IACL,CAAC,CAAC,CACD7C,KAAK,CAAE8C,KAAK,IAAKT,OAAO,CAACS,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC,CAAC;EACxE,CAAC;EACD,MAAMD,iBAAiB,GAAGA,CAAA,KAAM;IAC5BzD,iBAAiB,CAAC,KAAK,CAAC;IACxBE,cAAc,CAAC,IAAI,CAAC;IACpBd,QAAQ,CAACkC,OAAO,CAACe,OAAO,CAAC,CAAC;IAC1B7C,SAAS,CAAC,IAAI,CAAC;EACnB,CAAC;EACD/B,SAAS,CAAC,MAAM;IACZ,IAAI0C,aAAa,CAACmB,OAAO,IAAI/B,MAAM,EAAE;MACjCY,aAAa,CAACmB,OAAO,CAACI,SAAS,GAAGnC,MAAM;IAC5C;EACJ,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EACZ9B,SAAS,CAAC,MAAM;IACZ,IAAI2C,eAAe,CAACkB,OAAO,IAAI7B,OAAO,EAAE;MACpCW,eAAe,CAACkB,OAAO,CAACI,SAAS,GAAGjC,OAAO;IAC/C;EACJ,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EAIb,oBACI5B,OAAA,CAACC,aAAa,CAAC6F,QAAQ;IAACC,KAAK,EAAE;MAAE/E,IAAI;MAAEV,YAAY;MAAEc,OAAO;MAAEC,SAAS;MAAEX,MAAM;MAAEC,SAAS;MAAEE,UAAU;MAAEC,IAAI;MAAEC,OAAO;MAAEP,SAAS;MAAEU,EAAE;MAAEiD,QAAQ;MAAEI,SAAS;MAAET,UAAU;MAAE9B,KAAK;MAAEN,MAAM;MAAEY,aAAa;MAAEC,eAAe;MAAE+C,gBAAgB;MAAEM,iBAAiB;MAAE1D,cAAc;MAAEE,WAAW;MAAEuB;IAAa,CAAE;IAAAvD,QAAA,EAClSA;EAAQ;IAAA4F,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAEjC,CAAC;AAAA9F,EAAA,CA5LKF,eAAe;AAAAiG,EAAA,GAAfjG,eAAe;AA8LrB,SAASA,eAAe,EAAEF,aAAa;AAAE,IAAAmG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}