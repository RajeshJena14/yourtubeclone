{"ast":null,"code":"var _jsxFileName = \"D:\\\\FRONT-END (LIT)\\\\NULLCLASS_COURSE\\\\app2\\\\client\\\\src\\\\Component\\\\Stream\\\\ScreenVideo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport './screenshare.css';\nimport { SocketContext } from '../../Context';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ScreenVideo = () => {\n  _s();\n  const {\n    screen,\n    myScreenVideo,\n    screenAccepted,\n    screenEnded\n  } = useContext(SocketContext);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: screen ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"video\", {\n        muted: true,\n        autoPlay: true,\n        controls: true,\n        ref: myScreenVideo,\n        className: \"screenVid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 21\n    }, this) : {}\n  }, void 0, false);\n};\n_s(ScreenVideo, \"QVbvahGf1hurMekcTOTQsjDPrX4=\");\n_c = ScreenVideo;\nexport default ScreenVideo;\nvar _c;\n$RefreshReg$(_c, \"ScreenVideo\");","map":{"version":3,"names":["React","useContext","SocketContext","jsxDEV","_jsxDEV","Fragment","_Fragment","ScreenVideo","_s","screen","myScreenVideo","screenAccepted","screenEnded","children","muted","autoPlay","controls","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/FRONT-END (LIT)/NULLCLASS_COURSE/app2/client/src/Component/Stream/ScreenVideo.jsx"],"sourcesContent":["import React, { useContext } from 'react'\r\nimport './screenshare.css'\r\nimport { SocketContext } from '../../Context'\r\n\r\nconst ScreenVideo = () => {\r\n    const { screen, myScreenVideo, screenAccepted , screenEnded} = useContext(SocketContext)\r\n    return (\r\n        <>\r\n            {\r\n                screen ? (\r\n                    <div>\r\n                        <video muted autoPlay controls ref={myScreenVideo} className='screenVid' />\r\n                    </div>\r\n                ) : (\r\n                    {\r\n                        \r\n                    }\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ScreenVideo\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAO,mBAAmB;AAC1B,SAASC,aAAa,QAAQ,eAAe;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE7C,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM;IAAEC,MAAM;IAAEC,aAAa;IAAEC,cAAc;IAAGC;EAAW,CAAC,GAAGX,UAAU,CAACC,aAAa,CAAC;EACxF,oBACIE,OAAA,CAAAE,SAAA;IAAAO,QAAA,EAEQJ,MAAM,gBACFL,OAAA;MAAAS,QAAA,eACIT,OAAA;QAAOU,KAAK;QAACC,QAAQ;QAACC,QAAQ;QAACC,GAAG,EAAEP,aAAc;QAACQ,SAAS,EAAC;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1E,CAAC,GAEN,CAEA;EACH,gBAEP,CAAC;AAEX,CAAC;AAAAd,EAAA,CAjBKD,WAAW;AAAAgB,EAAA,GAAXhB,WAAW;AAmBjB,eAAeA,WAAW;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}