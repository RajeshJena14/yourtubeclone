{"ast":null,"code":"var _jsxFileName = \"D:\\\\FRONT-END (LIT)\\\\NULLCLASS_COURSE\\\\app2\\\\client\\\\src\\\\Pages\\\\VideoCall\\\\ConferencePage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useRef } from 'react';\nimport { SocketContext } from '../../Context.js';\nimport './conf.css';\nimport ScreenVideo from '../../Component/Stream/ScreenVideo.jsx';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ConferencePage = ({\n  mute\n}) => {\n  _s();\n  const context = useContext(SocketContext);\n  console.log(context);\n  const {\n    name,\n    callAccepted,\n    myVideo,\n    userVideo,\n    callEnded,\n    stream,\n    call\n  } = context;\n  useEffect(() => {\n    if (mute) {\n      document.getElementById('myvid').setAttribute(\"muted\", \"true\");\n    } else {\n      document.getElementById('myvid').removeAttribute(\"muted\");\n    }\n  }, [mute]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ScreenVideo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gridContainer\",\n      children: [stream ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"paper\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Name\",\n            children: name === '' ? 'Name' : name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n            playsInline: true,\n            ref: myVideo,\n            autoPlay: true,\n            className: \"video\",\n            id: \"myvid\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 25\n        }, this)\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), callAccepted && !callEnded ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"paper\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Name\",\n            children: name === '' ? 'Name' : name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n            playsInline: true,\n            ref: userVideo,\n            autoPlay: true,\n            className: \"video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 29\n        }, this)\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n_s(ConferencePage, \"wqnYpdjMkT3eDhbBjwDmfBO/TFg=\");\n_c = ConferencePage;\nexport default ConferencePage;\nvar _c;\n$RefreshReg$(_c, \"ConferencePage\");","map":{"version":3,"names":["React","useContext","useEffect","useRef","SocketContext","ScreenVideo","jsxDEV","_jsxDEV","Fragment","_Fragment","ConferencePage","mute","_s","context","console","log","name","callAccepted","myVideo","userVideo","callEnded","stream","call","document","getElementById","setAttribute","removeAttribute","children","fileName","_jsxFileName","lineNumber","columnNumber","className","playsInline","ref","autoPlay","id","_c","$RefreshReg$"],"sources":["D:/FRONT-END (LIT)/NULLCLASS_COURSE/app2/client/src/Pages/VideoCall/ConferencePage.jsx"],"sourcesContent":["import React, { useContext, useEffect, useRef } from 'react'\r\nimport { SocketContext } from '../../Context.js'\r\nimport './conf.css'\r\nimport ScreenVideo from '../../Component/Stream/ScreenVideo.jsx'\r\n\r\nconst ConferencePage = ({mute}) => {\r\n    const context = useContext(SocketContext)\r\n    console.log(context)\r\n    const { name, callAccepted, myVideo, userVideo, callEnded, stream, call } = context\r\n\r\n    useEffect(()=>{\r\n        if(mute){\r\n            document.getElementById('myvid').setAttribute(\"muted\",\"true\")\r\n        }\r\n        else\r\n        {\r\n            document.getElementById('myvid').removeAttribute(\"muted\")\r\n        }\r\n    },[mute])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ScreenVideo />\r\n            <div className=\"gridContainer\">\r\n                {stream ? (\r\n                    <>\r\n                        <div className=\"paper\">\r\n                            <div className='Name'>{name === '' ? 'Name' : name}</div>\r\n                            <video playsInline ref={myVideo} autoPlay className='video' id='myvid' />\r\n                        </div>\r\n                    </>\r\n                ) : (\r\n                    <></>\r\n                )\r\n                }\r\n                {\r\n                    (callAccepted && !callEnded) ? (\r\n                        <>\r\n                            <div className=\"paper\">\r\n                                <div className='Name'>{name === '' ? 'Name' : name}</div>\r\n                                <video playsInline ref={userVideo} autoPlay className='video' />\r\n                            </div>\r\n                        </>\r\n                    ) : (\r\n                        <></>\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConferencePage\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}