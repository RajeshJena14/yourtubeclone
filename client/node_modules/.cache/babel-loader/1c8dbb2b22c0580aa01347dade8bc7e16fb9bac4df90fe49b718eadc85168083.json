{"ast":null,"code":"var _jsxFileName = \"D:\\\\FRONT-END (LIT)\\\\NULLCLASS_COURSE\\\\app2\\\\client\\\\src\\\\Context.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nconst socket = io('http://localhost:2000');\nconst ContextProvider = ({\n  children\n}) => {\n  _s();\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [stream, setStream] = useState();\n  const [name, setName] = useState('');\n  const [call, setCall] = useState({});\n  const [me, setMe] = useState('');\n  const [isShared, setIsShared] = useState(false);\n  const [screen, setScreen] = useState();\n  const [screen1, setScreen1] = useState();\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const screenShareVideoMy = useRef();\n  const screenShareVideoUser = useRef();\n  const connectionRef = useRef();\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n    }).catch(er => alert(er));\n    socket.emit('room:join');\n    socket.on('callUser', ({\n      from,\n      name: callerName,\n      signal\n    }) => {\n      setCall({\n        isReceivingCall: true,\n        from,\n        name: callerName,\n        signal\n      });\n    });\n    return () => {\n      socket.off('callUser');\n    };\n  }, []);\n  useEffect(() => {\n    socket.on('room:join', data => {\n      setMe(data);\n    });\n    return () => {\n      socket.off('room:join');\n    };\n  }, [socket]);\n  useEffect(() => {\n    if (myVideo.current && stream) {\n      myVideo.current.srcObject = stream;\n    }\n  }, [stream]);\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('answerCall', {\n        signal: data,\n        to: call.from\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    peer.on('track', (track, currstream) => {\n      if (track.kind === 'video') {\n        console.log('Track');\n        setScreen1(currstream);\n      }\n    });\n    peer.signal(call.signal);\n    connectionRef.current = peer;\n  };\n  const callUser = id => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('callUser', {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    peer.on('track', (track, currstream) => {\n      if (track.kind === 'video') {\n        console.log('Track');\n        setScreen1(currstream);\n      }\n    });\n    socket.on('callAccepted', signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n    connectionRef.current = peer;\n  };\n\n  // useEffect(() => {\n  //     if (screenShareVideoUser.current && screen1) {\n  //         screenShareVideoUser.current.srcObject = screen1\n  //     }\n  // }, [screen1])\n\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n    window.location.reload();\n  };\n  useEffect(() => {\n    if (screenShareVideoMy.current && screen) {\n      screenShareVideoMy.current.srcObject = screen;\n    }\n  }, [screen]);\n  useEffect(() => {\n    if (screenShareVideoUser.current && screen1) {\n      console.log(screen1);\n      screenShareVideoUser.current.srcObject = screen1;\n    }\n  }, [screen]);\n  const startScreenShare = () => {\n    if (isShared) {\n      stopScreenSharing();\n    }\n    navigator.mediaDevices.getDisplayMedia({\n      video: true,\n      audio: true\n    }).then(currstream => {\n      setScreen(currstream);\n      let vidTrack = currstream.getVideoTracks()[0];\n      vidTrack.onended = () => {\n        stopScreenSharing();\n      };\n      if (connectionRef.current) {\n        currstream.getTracks().forEach(track => {\n          connectionRef.current.addTrack(track, currstream);\n        });\n      }\n      setIsShared(true);\n    }).catch(error => console.error('Error sharing screen:', error));\n  };\n  const stopScreenSharing = () => {\n    if (!isShared) {\n      return;\n    }\n    screen.getTracks().forEach(track => track.stop());\n    setIsShared(false);\n    setScreen(null);\n    if (connectionRef.current) {\n      connectionRef.current.getSenders().filter(sender => sender.track && sender.track.kind === 'video').forEach(sender => connectionRef.current.removeTrack(sender));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      call,\n      callAccepted,\n      myVideo,\n      userVideo,\n      stream,\n      setStream,\n      name,\n      setName,\n      callEnded,\n      me,\n      callUser,\n      leaveCall,\n      answerCall,\n      screenShareVideoMy,\n      screenShareVideoUser,\n      startScreenShare,\n      stopScreenSharing,\n      screen\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 9\n  }, this);\n};\n_s(ContextProvider, \"ln4SQByLQ7hlM8+Xk7csNG7+lSQ=\");\n_c = ContextProvider;\nexport { ContextProvider, SocketContext };\nvar _c;\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["React","createContext","useState","useRef","useEffect","io","Peer","jsxDEV","_jsxDEV","SocketContext","socket","ContextProvider","children","_s","callAccepted","setCallAccepted","callEnded","setCallEnded","stream","setStream","name","setName","call","setCall","me","setMe","isShared","setIsShared","screen","setScreen","screen1","setScreen1","myVideo","userVideo","screenShareVideoMy","screenShareVideoUser","connectionRef","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","catch","er","alert","emit","on","from","callerName","signal","isReceivingCall","off","data","current","srcObject","answerCall","peer","initiator","trickle","to","track","currstream","kind","console","log","callUser","id","userToCall","signalData","leaveCall","destroy","window","location","reload","startScreenShare","stopScreenSharing","getDisplayMedia","vidTrack","getVideoTracks","onended","getTracks","forEach","addTrack","error","stop","getSenders","filter","sender","removeTrack","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/FRONT-END (LIT)/NULLCLASS_COURSE/app2/client/src/Context.js"],"sourcesContent":["import React, { createContext, useState, useRef, useEffect } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport Peer from 'simple-peer';\r\n\r\nconst SocketContext = createContext()\r\n\r\nconst socket = io('http://localhost:2000');\r\n\r\nconst ContextProvider = ({ children }) => {\r\n    const [callAccepted, setCallAccepted] = useState(false);\r\n    const [callEnded, setCallEnded] = useState(false);\r\n    const [stream, setStream] = useState();\r\n    const [name, setName] = useState('');\r\n    const [call, setCall] = useState({});\r\n    const [me, setMe] = useState('');\r\n    const [isShared, setIsShared] = useState(false)\r\n    const [screen, setScreen] = useState()\r\n    const [screen1, setScreen1] = useState()\r\n\r\n    const myVideo = useRef();\r\n    const userVideo = useRef();\r\n    const screenShareVideoMy = useRef();\r\n    const screenShareVideoUser = useRef();\r\n    const connectionRef = useRef();\r\n\r\n    useEffect(() => {\r\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n            .then((currentStream) => {\r\n                setStream(currentStream)\r\n            })\r\n            .catch((er) => alert(er))\r\n        socket.emit('room:join');\r\n\r\n        socket.on('callUser', ({ from, name: callerName, signal }) => {\r\n            setCall({ isReceivingCall: true, from, name: callerName, signal });\r\n        });\r\n\r\n        return () => {\r\n            socket.off('callUser')\r\n        }\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        socket.on('room:join', (data) => {\r\n            setMe(data)\r\n        })\r\n        return () => {\r\n            socket.off('room:join')\r\n        }\r\n    }, [socket])\r\n\r\n    useEffect(() => {\r\n        if (myVideo.current && stream) {\r\n            myVideo.current.srcObject = stream\r\n        }\r\n    }, [stream])\r\n\r\n    const answerCall = () => {\r\n        setCallAccepted(true);\r\n\r\n        const peer = new Peer({ initiator: false, trickle: false, stream });\r\n\r\n        peer.on('signal', (data) => {\r\n            socket.emit('answerCall', { signal: data, to: call.from });\r\n        });\r\n\r\n        peer.on('stream', (currentStream) => {\r\n            userVideo.current.srcObject = currentStream;\r\n        });\r\n\r\n        peer.on('track', (track, currstream) => {\r\n            if (track.kind === 'video') {\r\n                console.log('Track')\r\n                setScreen1(currstream)\r\n            }\r\n        });\r\n\r\n        peer.signal(call.signal);\r\n\r\n        connectionRef.current = peer;\r\n    };\r\n\r\n    const callUser = (id) => {\r\n        const peer = new Peer({ initiator: true, trickle: false, stream });\r\n\r\n        peer.on('signal', (data) => {\r\n            socket.emit('callUser', { userToCall: id, signalData: data, from: me, name });\r\n        });\r\n\r\n        peer.on('stream', (currentStream) => {\r\n            userVideo.current.srcObject = currentStream;\r\n        });\r\n\r\n        peer.on('track', (track, currstream) => {\r\n            if (track.kind === 'video') {\r\n                console.log('Track')\r\n                setScreen1(currstream)\r\n            }\r\n        })\r\n\r\n        socket.on('callAccepted', (signal) => {\r\n            setCallAccepted(true);\r\n            peer.signal(signal);\r\n        });\r\n\r\n        connectionRef.current = peer;\r\n    };\r\n\r\n    // useEffect(() => {\r\n    //     if (screenShareVideoUser.current && screen1) {\r\n    //         screenShareVideoUser.current.srcObject = screen1\r\n    //     }\r\n    // }, [screen1])\r\n\r\n    const leaveCall = () => {\r\n        setCallEnded(true);\r\n        connectionRef.current.destroy();\r\n        window.location.reload();\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (screenShareVideoMy.current && screen) {\r\n            screenShareVideoMy.current.srcObject = screen\r\n        }\r\n    }, [screen])\r\n    useEffect(() => {\r\n        if (screenShareVideoUser.current && screen1) {\r\n            console.log(screen1)\r\n            screenShareVideoUser.current.srcObject = screen1\r\n        }\r\n    }, [screen])\r\n\r\n    const startScreenShare = () => {\r\n        if (isShared) {\r\n            stopScreenSharing()\r\n        }\r\n        navigator.mediaDevices.getDisplayMedia({ video: true, audio: true })\r\n            .then((currstream) => {\r\n                setScreen(currstream)\r\n                let vidTrack = currstream.getVideoTracks()[0]\r\n                vidTrack.onended = () => {\r\n                    stopScreenSharing()\r\n                }\r\n                if (connectionRef.current) {\r\n                    currstream.getTracks().forEach((track) => {\r\n                        connectionRef.current.addTrack(track, currstream);\r\n                    });\r\n                }\r\n                setIsShared(true);\r\n            })\r\n            .catch((error) => console.error('Error sharing screen:', error));\r\n    }\r\n    const stopScreenSharing = () => {\r\n        if (!isShared) {\r\n            return\r\n        }\r\n        screen.getTracks().forEach((track) => track.stop())\r\n        setIsShared(false)\r\n        setScreen(null);\r\n        if (connectionRef.current) {\r\n            connectionRef.current.getSenders()\r\n                .filter(sender => sender.track && sender.track.kind === 'video')\r\n                .forEach(sender => connectionRef.current.removeTrack(sender));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <SocketContext.Provider value={{ call, callAccepted, myVideo, userVideo, stream, setStream, name, setName, callEnded, me, callUser, leaveCall, answerCall, screenShareVideoMy, screenShareVideoUser, startScreenShare, stopScreenSharing, screen }} >\r\n            {children}\r\n        </SocketContext.Provider>\r\n    );\r\n};\r\n\r\nexport { ContextProvider, SocketContext }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}