{"ast":null,"code":"var _jsxFileName = \"D:\\\\FRONT-END (LIT)\\\\NULLCLASS_COURSE\\\\app2\\\\client\\\\src\\\\Pages\\\\Screens\\\\Room.jsx\",\n  _s = $RefreshSig$();\n// import React, { useCallback, useEffect, useState } from 'react'\n// import ReactPlayer from 'react-player'\n// import { useSocket } from '../../context/SocketProvider'\n// import peer from '../../service/peer'\n\n// const RoomPage = () => {\n//     const socket = useSocket()\n//     const [remoteSocketId, setRemoteSocketId] = useState(null)\n//     const [myStream, setMyStream] = useState()\n//     const [remoteStream, setRemoteStream] = useState()\n\n//     const handleUserJoined = useCallback(({ email, id }) => {\n//         console.log(`Email ${email} joined`)\n//         setRemoteSocketId(id)\n//     }, [])\n\n//     const handleIncomingCall = useCallback(async ({ from, offer }) => {\n//         setRemoteSocketId(from)\n//         const stream = await navigator.mediaDevices.getUserMedia({\n//             audio: true,\n//             video: true,\n//         })\n//         setMyStream(stream)\n//         console.log(\"Incoming call\", { from, offer })\n//         const ans = await peer.getAnswer(offer)\n//         socket.emit('call:accepted', { to: from, ans })\n//     }, [socket])\n\n//     const sendStreams = useCallback(() => {\n//         for (const track of myStream.getTracks()) {\n//             peer.peer.addTrack(track, myStream)\n//         }\n//     }, [myStream])\n\n//     const handleCallAccepted = useCallback(({ from, ans }) => {\n//         peer.setLocalDescription(ans)\n//         sendStreams()\n//     }, [sendStreams])\n\n//     const handleNegoNeeded = useCallback(async () => {\n//         const offer = await peer.getOffer()\n//         socket.emit(\"peer:nego:needed\", { offer, to: remoteSocketId })\n//     }, [remoteSocketId, socket])\n\n//     const handleNegoNeedIncoming = useCallback(async({ from, offer }) => {\n//         const ans =await peer.getAnswer(offer)\n//         socket.emit('peer:nego:done', { to: from, ans })\n//     }, [socket])\n\n//     const handleNegoNeedFinal = useCallback(async ({ from, ans }) => {\n//         await peer.setLocalDescription(ans)\n//     }, [])\n\n//     useEffect(() => {\n//         peer.peer.addEventListener('negotiationneeded', handleNegoNeeded)\n//         return () => {\n//             peer.peer.removeEventListener('negotiationneeded', handleNegoNeeded)\n//         }\n//     }, [handleNegoNeeded])\n\n//     useEffect(() => {\n//         peer.peer.addEventListener('track', async (ev) => {\n//             const str = ev.streams\n//             console.log(str)\n//             setRemoteStream(str[0])\n//         })\n//     }, [])\n\n//     useEffect(() => {\n//         socket.on('user:joined', handleUserJoined)\n//         socket.on('incoming:call', handleIncomingCall)\n//         socket.on('call:accepted', handleCallAccepted)\n//         socket.on('peer:nego:needed', handleNegoNeedIncoming)\n//         socket.on('peer:nego:final', handleNegoNeedFinal)\n//         return () => {\n//             socket.off('user:joined', handleUserJoined)\n//             socket.off('incoming:call', handleIncomingCall)\n//             socket.off('call:accepted', handleCallAccepted)\n//             socket.off('peer:nego:needed', handleNegoNeedIncoming)\n//             socket.off('peer:nego:final', handleNegoNeedFinal)\n//         }\n//     }, [socket, handleUserJoined, handleIncomingCall, handleCallAccepted, handleNegoNeedIncoming, handleNegoNeedFinal])\n\n//     const handleCallUser = useCallback(async () => {\n//         const stream = await navigator.mediaDevices.getUserMedia({\n//             audio: true,\n//             video: true,\n//         })\n//         const offer = await peer.getOffer()\n//         socket.emit(\"user:call\", { to: remoteSocketId, offer })\n//         setMyStream(stream)\n//     }, [remoteSocketId, socket])\n//     return (\n//         <div>\n//             <h1>Room Page</h1>\n//             <h1>{remoteSocketId ? 'Connected' : \"No One In Room\"}</h1>\n//             {\n//                 myStream && <button onClick={sendStreams}>Accept</button>\n//             }\n//             {\n//                 remoteSocketId && <button onClick={handleCallUser}>Call</button>\n//             }\n//             {\n//                 myStream &&\n//                 <>\n//                     <h1>My Stream</h1>\n//                     <ReactPlayer\n//                         playing\n//                         muted\n//                         height=\"226px\"\n//                         width=\"300px\"\n//                         url={myStream}\n//                     />\n//                 </>\n//             }\n//             {\n//                 remoteStream &&\n//                 <>\n//                     <h1>Friend's Stream</h1>\n//                     <ReactPlayer\n//                         playing\n//                         muted\n//                         height=\"226px\"\n//                         width=\"300px\"\n//                         url={remoteStream}\n//                     />\n//                 </>\n//             }\n//         </div>\n//     )\n// }\n\n// export default RoomPage\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport ReactPlayer from 'react-player';\nimport { useSocket } from '../../context/SocketProvider';\nimport peer from '../../service/peer';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RoomPage = () => {\n  _s();\n  const socket = useSocket();\n  const [remoteSocketId, setRemoteSocketId] = useState([]);\n  const [remoteSocketId1, setRemoteSocketId1] = useState([]);\n  const [myStream, setMyStream] = useState();\n  const [remoteStream, setRemoteStream] = useState([]);\n  const handleUserJoined = useCallback(({\n    email,\n    id\n  }) => {\n    console.log(`Email ${email} joined`);\n    setRemoteSocketId(remoteSocketId.push(id));\n  }, []);\n  const handleIncomingCall = useCallback(async ({\n    from,\n    offer\n  }) => {\n    setRemoteSocketId(remoteSocketId.push(from));\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: true\n    });\n    setMyStream(stream);\n    console.log(\"Incoming call\", {\n      from,\n      offer\n    });\n    const ans = await peer.getAnswer(offer);\n    socket.emit('call:accepted', {\n      to: from,\n      ans\n    });\n  }, [socket]);\n  const sendStreams = useCallback(() => {\n    for (const track of myStream.getTracks()) {\n      peer.peer.addTrack(track, myStream);\n    }\n  }, [myStream]);\n  const handleCallAccepted = useCallback(({\n    from,\n    ans\n  }) => {\n    peer.setLocalDescription(ans);\n    sendStreams();\n  }, [sendStreams]);\n  const handleNegoNeeded = useCallback(async () => {\n    const offer = await peer.getOffer();\n    socket.emit(\"peer:nego:needed\", {\n      offer,\n      to: remoteSocketId\n    });\n  }, [remoteSocketId, socket]);\n  const handleNegoNeedIncoming = useCallback(async ({\n    from,\n    offer\n  }) => {\n    const ans = await peer.getAnswer(offer);\n    socket.emit('peer:nego:done', {\n      to: from,\n      ans\n    });\n  }, [socket]);\n  const handleNegoNeedFinal = useCallback(async ({\n    from,\n    ans\n  }) => {\n    await peer.setLocalDescription(ans);\n  }, []);\n  useEffect(() => {\n    peer.peer.addEventListener('negotiationneeded', handleNegoNeeded);\n    return () => {\n      peer.peer.removeEventListener('negotiationneeded', handleNegoNeeded);\n    };\n  }, [handleNegoNeeded]);\n  useEffect(() => {\n    peer.peer.addEventListener('track', async ev => {\n      const str = ev.streams;\n      console.log(str);\n      setRemoteStream(remoteStream.push(str[0]));\n    });\n  }, []);\n  useEffect(() => {\n    socket.on('user:joined', handleUserJoined);\n    socket.on('incoming:call', handleIncomingCall);\n    socket.on('call:accepted', handleCallAccepted);\n    socket.on('peer:nego:needed', handleNegoNeedIncoming);\n    socket.on('peer:nego:final', handleNegoNeedFinal);\n    return () => {\n      socket.off('user:joined', handleUserJoined);\n      socket.off('incoming:call', handleIncomingCall);\n      socket.off('call:accepted', handleCallAccepted);\n      socket.off('peer:nego:needed', handleNegoNeedIncoming);\n      socket.off('peer:nego:final', handleNegoNeedFinal);\n    };\n  }, [socket, handleUserJoined, handleIncomingCall, handleCallAccepted, handleNegoNeedIncoming, handleNegoNeedFinal]);\n  const handleCallUser = useCallback(async () => {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: true\n    });\n    const offer = await peer.getOffer();\n    remoteSocketId.map(rs => {\n      socket.emit(\"user:call\", {\n        to: rs,\n        offer\n      });\n      setMyStream(stream);\n    });\n  }, [remoteSocketId, socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Room Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: remoteSocketId.length != 0 ? 'Connected' : \"No One In Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 13\n    }, this), myStream && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendStreams,\n      children: \"Accept\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 29\n    }, this), remoteSocketId.length != 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCallUser,\n      children: \"Call\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 47\n    }, this), myStream && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"My Stream\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ReactPlayer, {\n        playing: true,\n        muted: true,\n        height: \"226px\",\n        width: \"300px\",\n        url: myStream\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), remoteStream.length != 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Friend's Stream\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 21\n      }, this), remoteStream.map(rs => {\n        /*#__PURE__*/_jsxDEV(ReactPlayer, {\n          playing: true,\n          muted: true,\n          height: \"226px\",\n          width: \"300px\",\n          url: rs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 29\n        }, this);\n      })]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 9\n  }, this);\n};\n_s(RoomPage, \"3JLh7tpudpMGt6rtV61xq9LOPpA=\", false, function () {\n  return [useSocket];\n});\n_c = RoomPage;\nexport default RoomPage;\nvar _c;\n$RefreshReg$(_c, \"RoomPage\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","ReactPlayer","useSocket","peer","jsxDEV","_jsxDEV","Fragment","_Fragment","RoomPage","_s","socket","remoteSocketId","setRemoteSocketId","remoteSocketId1","setRemoteSocketId1","myStream","setMyStream","remoteStream","setRemoteStream","handleUserJoined","email","id","console","log","push","handleIncomingCall","from","offer","stream","navigator","mediaDevices","getUserMedia","audio","video","ans","getAnswer","emit","to","sendStreams","track","getTracks","addTrack","handleCallAccepted","setLocalDescription","handleNegoNeeded","getOffer","handleNegoNeedIncoming","handleNegoNeedFinal","addEventListener","removeEventListener","ev","str","streams","on","off","handleCallUser","map","rs","children","fileName","_jsxFileName","lineNumber","columnNumber","length","onClick","playing","muted","height","width","url","_c","$RefreshReg$"],"sources":["D:/FRONT-END (LIT)/NULLCLASS_COURSE/app2/client/src/Pages/Screens/Room.jsx"],"sourcesContent":["// import React, { useCallback, useEffect, useState } from 'react'\r\n// import ReactPlayer from 'react-player'\r\n// import { useSocket } from '../../context/SocketProvider'\r\n// import peer from '../../service/peer'\r\n\r\n// const RoomPage = () => {\r\n//     const socket = useSocket()\r\n//     const [remoteSocketId, setRemoteSocketId] = useState(null)\r\n//     const [myStream, setMyStream] = useState()\r\n//     const [remoteStream, setRemoteStream] = useState()\r\n\r\n//     const handleUserJoined = useCallback(({ email, id }) => {\r\n//         console.log(`Email ${email} joined`)\r\n//         setRemoteSocketId(id)\r\n//     }, [])\r\n\r\n//     const handleIncomingCall = useCallback(async ({ from, offer }) => {\r\n//         setRemoteSocketId(from)\r\n//         const stream = await navigator.mediaDevices.getUserMedia({\r\n//             audio: true,\r\n//             video: true,\r\n//         })\r\n//         setMyStream(stream)\r\n//         console.log(\"Incoming call\", { from, offer })\r\n//         const ans = await peer.getAnswer(offer)\r\n//         socket.emit('call:accepted', { to: from, ans })\r\n//     }, [socket])\r\n\r\n//     const sendStreams = useCallback(() => {\r\n//         for (const track of myStream.getTracks()) {\r\n//             peer.peer.addTrack(track, myStream)\r\n//         }\r\n//     }, [myStream])\r\n\r\n//     const handleCallAccepted = useCallback(({ from, ans }) => {\r\n//         peer.setLocalDescription(ans)\r\n//         sendStreams()\r\n//     }, [sendStreams])\r\n\r\n//     const handleNegoNeeded = useCallback(async () => {\r\n//         const offer = await peer.getOffer()\r\n//         socket.emit(\"peer:nego:needed\", { offer, to: remoteSocketId })\r\n//     }, [remoteSocketId, socket])\r\n\r\n//     const handleNegoNeedIncoming = useCallback(async({ from, offer }) => {\r\n//         const ans =await peer.getAnswer(offer)\r\n//         socket.emit('peer:nego:done', { to: from, ans })\r\n//     }, [socket])\r\n\r\n//     const handleNegoNeedFinal = useCallback(async ({ from, ans }) => {\r\n//         await peer.setLocalDescription(ans)\r\n//     }, [])\r\n\r\n//     useEffect(() => {\r\n//         peer.peer.addEventListener('negotiationneeded', handleNegoNeeded)\r\n//         return () => {\r\n//             peer.peer.removeEventListener('negotiationneeded', handleNegoNeeded)\r\n//         }\r\n//     }, [handleNegoNeeded])\r\n\r\n//     useEffect(() => {\r\n//         peer.peer.addEventListener('track', async (ev) => {\r\n//             const str = ev.streams\r\n//             console.log(str)\r\n//             setRemoteStream(str[0])\r\n//         })\r\n//     }, [])\r\n\r\n//     useEffect(() => {\r\n//         socket.on('user:joined', handleUserJoined)\r\n//         socket.on('incoming:call', handleIncomingCall)\r\n//         socket.on('call:accepted', handleCallAccepted)\r\n//         socket.on('peer:nego:needed', handleNegoNeedIncoming)\r\n//         socket.on('peer:nego:final', handleNegoNeedFinal)\r\n//         return () => {\r\n//             socket.off('user:joined', handleUserJoined)\r\n//             socket.off('incoming:call', handleIncomingCall)\r\n//             socket.off('call:accepted', handleCallAccepted)\r\n//             socket.off('peer:nego:needed', handleNegoNeedIncoming)\r\n//             socket.off('peer:nego:final', handleNegoNeedFinal)\r\n//         }\r\n//     }, [socket, handleUserJoined, handleIncomingCall, handleCallAccepted, handleNegoNeedIncoming, handleNegoNeedFinal])\r\n\r\n//     const handleCallUser = useCallback(async () => {\r\n//         const stream = await navigator.mediaDevices.getUserMedia({\r\n//             audio: true,\r\n//             video: true,\r\n//         })\r\n//         const offer = await peer.getOffer()\r\n//         socket.emit(\"user:call\", { to: remoteSocketId, offer })\r\n//         setMyStream(stream)\r\n//     }, [remoteSocketId, socket])\r\n//     return (\r\n//         <div>\r\n//             <h1>Room Page</h1>\r\n//             <h1>{remoteSocketId ? 'Connected' : \"No One In Room\"}</h1>\r\n//             {\r\n//                 myStream && <button onClick={sendStreams}>Accept</button>\r\n//             }\r\n//             {\r\n//                 remoteSocketId && <button onClick={handleCallUser}>Call</button>\r\n//             }\r\n//             {\r\n//                 myStream &&\r\n//                 <>\r\n//                     <h1>My Stream</h1>\r\n//                     <ReactPlayer\r\n//                         playing\r\n//                         muted\r\n//                         height=\"226px\"\r\n//                         width=\"300px\"\r\n//                         url={myStream}\r\n//                     />\r\n//                 </>\r\n//             }\r\n//             {\r\n//                 remoteStream &&\r\n//                 <>\r\n//                     <h1>Friend's Stream</h1>\r\n//                     <ReactPlayer\r\n//                         playing\r\n//                         muted\r\n//                         height=\"226px\"\r\n//                         width=\"300px\"\r\n//                         url={remoteStream}\r\n//                     />\r\n//                 </>\r\n//             }\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default RoomPage\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useCallback, useEffect, useState } from 'react'\r\nimport ReactPlayer from 'react-player'\r\nimport { useSocket } from '../../context/SocketProvider'\r\nimport peer from '../../service/peer'\r\n\r\nconst RoomPage = () => {\r\n    const socket = useSocket()\r\n    const [remoteSocketId, setRemoteSocketId] = useState([])\r\n    const [remoteSocketId1, setRemoteSocketId1] = useState([])\r\n    const [myStream, setMyStream] = useState()\r\n    const [remoteStream, setRemoteStream] = useState([])\r\n\r\n    const handleUserJoined = useCallback(({ email, id }) => {\r\n        console.log(`Email ${email} joined`)\r\n        setRemoteSocketId(remoteSocketId.push(id))\r\n    }, [])\r\n\r\n    const handleIncomingCall = useCallback(async ({ from, offer }) => {\r\n        setRemoteSocketId(remoteSocketId.push(from))\r\n        const stream = await navigator.mediaDevices.getUserMedia({\r\n            audio: true,\r\n            video: true,\r\n        })\r\n        setMyStream(stream)\r\n        console.log(\"Incoming call\", { from, offer })\r\n        const ans = await peer.getAnswer(offer)\r\n        socket.emit('call:accepted', { to: from, ans })\r\n    }, [socket])\r\n\r\n    const sendStreams = useCallback(() => {\r\n        for (const track of myStream.getTracks()) {\r\n            peer.peer.addTrack(track, myStream)\r\n        }\r\n    }, [myStream])\r\n\r\n    const handleCallAccepted = useCallback(({ from, ans }) => {\r\n        peer.setLocalDescription(ans)\r\n        sendStreams()\r\n    }, [sendStreams])\r\n\r\n    const handleNegoNeeded = useCallback(async () => {\r\n        const offer = await peer.getOffer()\r\n        socket.emit(\"peer:nego:needed\", { offer, to: remoteSocketId })\r\n    }, [remoteSocketId, socket])\r\n\r\n    const handleNegoNeedIncoming = useCallback(async ({ from, offer }) => {\r\n        const ans = await peer.getAnswer(offer)\r\n        socket.emit('peer:nego:done', { to: from, ans })\r\n    }, [socket])\r\n\r\n    const handleNegoNeedFinal = useCallback(async ({ from, ans }) => {\r\n        await peer.setLocalDescription(ans)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        peer.peer.addEventListener('negotiationneeded', handleNegoNeeded)\r\n        return () => {\r\n            peer.peer.removeEventListener('negotiationneeded', handleNegoNeeded)\r\n        }\r\n    }, [handleNegoNeeded])\r\n\r\n    useEffect(() => {\r\n        peer.peer.addEventListener('track', async (ev) => {\r\n            const str = ev.streams\r\n            console.log(str)\r\n            setRemoteStream(remoteStream.push(str[0]))\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        socket.on('user:joined', handleUserJoined)\r\n        socket.on('incoming:call', handleIncomingCall)\r\n        socket.on('call:accepted', handleCallAccepted)\r\n        socket.on('peer:nego:needed', handleNegoNeedIncoming)\r\n        socket.on('peer:nego:final', handleNegoNeedFinal)\r\n        return () => {\r\n            socket.off('user:joined', handleUserJoined)\r\n            socket.off('incoming:call', handleIncomingCall)\r\n            socket.off('call:accepted', handleCallAccepted)\r\n            socket.off('peer:nego:needed', handleNegoNeedIncoming)\r\n            socket.off('peer:nego:final', handleNegoNeedFinal)\r\n        }\r\n    }, [socket, handleUserJoined, handleIncomingCall, handleCallAccepted, handleNegoNeedIncoming, handleNegoNeedFinal])\r\n\r\n    const handleCallUser = useCallback(async () => {\r\n        const stream = await navigator.mediaDevices.getUserMedia({\r\n            audio: true,\r\n            video: true,\r\n        })\r\n        const offer = await peer.getOffer()\r\n        remoteSocketId.map((rs) => {\r\n            socket.emit(\"user:call\", { to: rs, offer })\r\n            setMyStream(stream)\r\n        })\r\n    }, [remoteSocketId, socket])\r\n    return (\r\n        <div>\r\n            <h1>Room Page</h1>\r\n            <h1>{remoteSocketId.length != 0 ? 'Connected' : \"No One In Room\"}</h1>\r\n            {\r\n                myStream && <button onClick={sendStreams}>Accept</button>\r\n            }\r\n            {\r\n                remoteSocketId.length != 0 && <button onClick={handleCallUser}>Call</button>\r\n            }\r\n            {\r\n                myStream &&\r\n                <>\r\n                    <h1>My Stream</h1>\r\n                    <ReactPlayer\r\n                        playing\r\n                        muted\r\n                        height=\"226px\"\r\n                        width=\"300px\"\r\n                        url={myStream}\r\n                    />\r\n                </>\r\n            }\r\n            {\r\n                remoteStream.length != 0 &&\r\n                <>\r\n                    <h1>Friend's Stream</h1>\r\n                    {\r\n                        remoteStream.map((rs) => {\r\n                            <ReactPlayer\r\n                                playing\r\n                                muted\r\n                                height=\"226px\"\r\n                                width=\"300px\"\r\n                                url={rs}\r\n                            />\r\n                        })\r\n                    }\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RoomPage"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}