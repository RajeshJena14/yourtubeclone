{"ast":null,"code":"var _jsxFileName = \"D:\\\\FRONT-END (LIT)\\\\NULLCLASS_COURSE\\\\app2\\\\client\\\\src\\\\Context.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useRef, useEffect, useCallback } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\nconst socket = io('http://localhost:2000');\nconst ContextProvider = ({\n  children\n}) => {\n  _s();\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n  const [stream, setStream] = useState();\n  const [stream1, setStream1] = useState();\n  const [name, setName] = useState('');\n  const [call, setCall] = useState({});\n  const [me, setMe] = useState('');\n  const [users, setUsers] = useState([]);\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n  const [screen, setScreen] = useState();\n  const [screenAccepted, setScreenAccepted] = useState(false);\n  const [screenEnded, setScreenEnded] = useState(false);\n  const myScreenVideo = useRef();\n  const userScreenVideo = useRef();\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream);\n    }).catch(er => alert(er));\n    socket.emit('room:join');\n    socket.on('callUser', ({\n      from,\n      name: callerName,\n      signal\n    }) => {\n      setCall({\n        isReceivingCall: true,\n        from,\n        name: callerName,\n        signal\n      });\n    });\n    return () => {\n      socket.off('callUser');\n    };\n  }, []);\n  useEffect(() => {\n    socket.on('room:join', data => {\n      setMe(data);\n      setUsers(users.push(data));\n    });\n    return () => {\n      socket.off('room:join');\n    };\n  }, [socket]);\n  useEffect(() => {\n    if (myVideo.current && stream) {\n      myVideo.current.srcObject = stream;\n    }\n  }, [stream]);\n  useEffect(() => {\n    if (userVideo.current && stream1) {\n      userVideo.current.srcObject = stream1;\n    }\n  }, [stream1]);\n  console.log(users);\n  const answerCall = () => {\n    setCallAccepted(true);\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('answerCall', {\n        signal: data,\n        to: call.from\n      });\n    });\n    peer.on('stream', currentStream => {\n      // userVideo.current.srcObject = currentStream;\n      setStream1(currentStream);\n    });\n    peer.signal(call.signal);\n    connectionRef.current = peer;\n  };\n  const callUser = id => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('callUser', {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name\n      });\n    });\n    peer.on('stream', currentStream => {\n      // userVideo.current.srcObject = currentStream;\n      setStream1(currentStream);\n    });\n    socket.on('callAccepted', signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    });\n    connectionRef.current = peer;\n  };\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n    window.location.reload();\n  };\n  const startScreenShare = () => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      screen\n    });\n    navigator.mediaDevices.getDisplayMedia({\n      video: {\n        mediaSource: 'screen'\n      },\n      audio: true\n    }).then(currstream => {\n      setScreen(currstream);\n      let vidTrack = currstream.getVideoTracks()[0];\n      if (connectionRef.current) {\n        // peer\n      }\n      vidTrack.onended = () => {\n        stopScreenSharing();\n      };\n    }).catch(error => console.error('Error sharing screen:', error));\n  };\n  const stopScreenSharing = () => {\n    // screen.getTracks().forEach((track) => track.stop())\n    setScreenAccepted(false);\n    setScreenEnded(true);\n    setScreen(null);\n  };\n  useEffect(() => {\n    if (myScreenVideo.current && screen) {\n      myScreenVideo.current.srcObject = screen;\n    }\n    if (screenAccepted && !screenEnded) {\n      if (userScreenVideo.current && screen) {\n        userScreenVideo.current.srcObject = screen;\n      }\n    }\n  }, [screen, screenAccepted, screenEnded]);\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: {\n      call,\n      callAccepted,\n      myVideo,\n      userVideo,\n      stream,\n      setStream,\n      name,\n      setName,\n      callEnded,\n      me,\n      callUser,\n      leaveCall,\n      answerCall,\n      screen,\n      myScreenVideo,\n      userScreenVideo,\n      startScreenShare,\n      stopScreenSharing,\n      screenAccepted,\n      screenEnded\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 9\n  }, this);\n};\n_s(ContextProvider, \"ftPjfAT1Idex3sAzKJgXQdUzUlE=\");\n_c = ContextProvider;\nexport { ContextProvider, SocketContext };\nvar _c;\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["React","createContext","useState","useRef","useEffect","useCallback","io","Peer","jsxDEV","_jsxDEV","SocketContext","socket","ContextProvider","children","_s","callAccepted","setCallAccepted","callEnded","setCallEnded","stream","setStream","stream1","setStream1","name","setName","call","setCall","me","setMe","users","setUsers","myVideo","userVideo","connectionRef","screen","setScreen","screenAccepted","setScreenAccepted","screenEnded","setScreenEnded","myScreenVideo","userScreenVideo","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","catch","er","alert","emit","on","from","callerName","signal","isReceivingCall","off","data","push","current","srcObject","console","log","answerCall","peer","initiator","trickle","to","callUser","id","userToCall","signalData","leaveCall","destroy","window","location","reload","startScreenShare","getDisplayMedia","mediaSource","currstream","vidTrack","getVideoTracks","onended","stopScreenSharing","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/FRONT-END (LIT)/NULLCLASS_COURSE/app2/client/src/Context.js"],"sourcesContent":["import React, { createContext, useState, useRef, useEffect, useCallback } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport Peer from 'simple-peer';\r\n\r\nconst SocketContext = createContext()\r\n\r\nconst socket = io('http://localhost:2000');\r\n\r\nconst ContextProvider = ({ children }) => {\r\n    const [callAccepted, setCallAccepted] = useState(false);\r\n    const [callEnded, setCallEnded] = useState(false);\r\n    const [stream, setStream] = useState();\r\n    const [stream1, setStream1] = useState();\r\n    const [name, setName] = useState('');\r\n    const [call, setCall] = useState({});\r\n    const [me, setMe] = useState('');\r\n    const [users,setUsers] = useState([])\r\n\r\n    const myVideo = useRef();\r\n    const userVideo = useRef();\r\n    const connectionRef = useRef();\r\n\r\n    const [screen, setScreen] = useState()\r\n    const [screenAccepted, setScreenAccepted] = useState(false);\r\n    const [screenEnded, setScreenEnded] = useState(false);\r\n    const myScreenVideo = useRef()\r\n    const userScreenVideo = useRef()\r\n\r\n    useEffect(() => {\r\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true })\r\n            .then((currentStream) => {\r\n                setStream(currentStream)\r\n            })\r\n            .catch((er) => alert(er))\r\n        socket.emit('room:join');\r\n\r\n        socket.on('callUser', ({ from, name: callerName, signal }) => {\r\n            setCall({ isReceivingCall: true, from, name: callerName, signal });\r\n        });\r\n\r\n        return () => {\r\n            socket.off('callUser')\r\n        }\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        socket.on('room:join', (data) => {\r\n            setMe(data)\r\n            setUsers(users.push(data))\r\n        })\r\n        return () => {\r\n            socket.off('room:join')\r\n        }\r\n    }, [socket])\r\n\r\n    useEffect(() => {\r\n        if (myVideo.current && stream) {\r\n            myVideo.current.srcObject = stream\r\n        }\r\n    }, [stream])\r\n    useEffect(() => {\r\n        if (userVideo.current && stream1) {\r\n            userVideo.current.srcObject = stream1\r\n        }\r\n    }, [stream1])\r\n\r\n\r\n    console.log(users)\r\n\r\n    const answerCall = () => {\r\n        setCallAccepted(true);\r\n        const peer = new Peer({ initiator: false, trickle: false, stream });\r\n        peer.on('signal', (data) => {\r\n            socket.emit('answerCall', { signal: data, to: call.from });\r\n        });\r\n        peer.on('stream', (currentStream) => {\r\n            // userVideo.current.srcObject = currentStream;\r\n            setStream1(currentStream)\r\n        });\r\n        peer.signal(call.signal);\r\n        connectionRef.current = peer;\r\n    };\r\n\r\n    const callUser = (id) => {\r\n        const peer = new Peer({ initiator: true, trickle: false, stream });\r\n        peer.on('signal', (data) => {\r\n            socket.emit('callUser', { userToCall: id, signalData: data, from: me, name });\r\n        });\r\n        peer.on('stream', (currentStream) => {\r\n            // userVideo.current.srcObject = currentStream;\r\n            setStream1(currentStream)\r\n        });\r\n        socket.on('callAccepted', (signal) => {\r\n            setCallAccepted(true);\r\n            peer.signal(signal);\r\n        });\r\n        connectionRef.current = peer;\r\n    };\r\n\r\n    const leaveCall = () => {\r\n        setCallEnded(true);\r\n        connectionRef.current.destroy();\r\n        window.location.reload();\r\n    };\r\n\r\n\r\n    const startScreenShare = () => {\r\n        const peer = new Peer({ initiator: true, trickle: false, screen });\r\n        navigator.mediaDevices.getDisplayMedia({ video: { mediaSource: 'screen', }, audio: true })\r\n            .then((currstream) => {\r\n                setScreen(currstream)\r\n                let vidTrack = currstream.getVideoTracks()[0]\r\n                if (connectionRef.current) {\r\n                    // peer\r\n                }\r\n                vidTrack.onended = () => {\r\n                    stopScreenSharing()\r\n                }\r\n            })\r\n            .catch((error) => console.error('Error sharing screen:', error));\r\n    }\r\n    const stopScreenSharing = () => {\r\n        // screen.getTracks().forEach((track) => track.stop())\r\n        setScreenAccepted(false)\r\n        setScreenEnded(true)\r\n        setScreen(null);\r\n    }\r\n    useEffect(() => {\r\n        if (myScreenVideo.current && screen) {\r\n            myScreenVideo.current.srcObject = screen\r\n        }\r\n        if (screenAccepted && !screenEnded) {\r\n            if (userScreenVideo.current && screen) {\r\n                userScreenVideo.current.srcObject = screen\r\n            }\r\n        }\r\n    }, [screen, screenAccepted, screenEnded])\r\n\r\n\r\n\r\n    return (\r\n        <SocketContext.Provider value={{ call, callAccepted, myVideo, userVideo, stream, setStream, name, setName, callEnded, me, callUser, leaveCall, answerCall, screen, myScreenVideo, userScreenVideo, startScreenShare, stopScreenSharing, screenAccepted, screenEnded }} >\r\n            {children}\r\n        </SocketContext.Provider>\r\n    );\r\n};\r\n\r\nexport { ContextProvider, SocketContext }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}